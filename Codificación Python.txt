** En terminal de VSC **
python -m venv entorno_proyecto
entorno_proyecto\Scripts\activate
pip install flask flask_sqlalchemy flask_jwt_extended
pip install flask-cors
pip install werkzeug
pip install pymysql
python app.py




*** En app.py ***

from flask_cors import CORS
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, jwt_required, create_access_token
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "http://localhost:4200"}})
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@localhost/entorno_proyecto_db'
app.config['JWT_SECRET_KEY'] = 'super-secreto'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  

db = SQLAlchemy(app)
jwt = JWTManager(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

class info_user(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    peso = db.Column(db.Integer(), nullable=False)
    genero = db.Column(db.String(10), nullable=False)
    edad = db.Column(db.Integer(), nullable=False)

@app.route('/login', methods=['POST'])
def login():
    if not request.is_json:
        return jsonify({"msg": "Falta JSON en la solicitud"}), 400

    username = request.json.get('username', None)
    password = request.json.get('password', None)

    if not username:
        return jsonify({"msg": "Falta el parámetro de nombre de usuario"}), 400
    if not password:
        return jsonify({"msg": "Falta el parámetro de contraseña"}), 400

    user_check = User.query.filter_by(username=username).first()
    if user_check is None or not check_password_hash(user_check.password, password):
        return jsonify({"msg": "Nombre de usuario o contraseña incorrectos"}), 401

    access_token = create_access_token(identity=username)
    return jsonify(access_token=access_token), 200

@app.route('/user', methods=['POST'])
def create_user():
    if not request.is_json:
        return jsonify({"msg": "Falta JSON en la solicitud"}), 400

    username = request.json.get('username', None)
    password = request.json.get('password', None)

    if not username:
        return jsonify({"msg": "Falta el parámetro de nombre de usuario"}), 400
    if not password:
        return jsonify({"msg": "Falta el parámetro de contraseña"}), 400

    user = User(username=username, password=generate_password_hash(password))
    db.session.add(user)
    db.session.commit()
    
    return jsonify({"id": user.id, "username": user.username}), 201

@app.route('/info', methods=['POST'])
@jwt_required()
def info_db():
    if not request.is_json:
        return jsonify({"msg": "Falta JSON en la solicitud"}), 400

    peso = request.json.get('peso', None)
    genero = request.json.get('genero', None)
    edad = request.json.get('edad', None)

    if not peso:
        return jsonify({"msg": "Falta el peso del usuario"}), 400
    if not genero:
        return jsonify({"msg": "Falta el genero del usuario"}), 400
    if not edad:
        return jsonify({"msg": "Falta la edad del usuario"}), 400

    info = info_user(peso= peso, genero= genero, edad= edad)
    db.session.add(info)
    db.session.commit()
    
    return jsonify({"peso": peso, "genero": genero, "edad": edad}), 201

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)